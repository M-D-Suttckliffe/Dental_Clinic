// <auto-generated />
using System;
using Dental_Clinic.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Dental_Clinic.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230402173208_Initialmigration")]
    partial class Initialmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Dental_Clinic.Models.Diagnos", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("diagnosisName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Diagnosis");
                });

            modelBuilder.Entity("Dental_Clinic.Models.Doctor", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("Postid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("birthday")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("middleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("surName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("Postid");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Dental_Clinic.Models.ListPrepforTreatment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("MedTreatmentid")
                        .HasColumnType("integer");

                    b.Property<int>("Medicationid")
                        .HasColumnType("integer");

                    b.Property<string>("amountMedications")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("MedTreatmentid");

                    b.HasIndex("Medicationid");

                    b.ToTable("ListPrepforTreatments");
                });

            modelBuilder.Entity("Dental_Clinic.Models.MedService", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("price")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("MedServices");
                });

            modelBuilder.Entity("Dental_Clinic.Models.MedTreatment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("Diagnosid")
                        .HasColumnType("integer");

                    b.Property<int>("Diagnosisid")
                        .HasColumnType("integer");

                    b.Property<string>("diagnosName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("Diagnosid");

                    b.ToTable("MedTreatments");
                });

            modelBuilder.Entity("Dental_Clinic.Models.Medication", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("recipeCheck")
                        .HasColumnType("boolean");

                    b.HasKey("id");

                    b.ToTable("Medications");
                });

            modelBuilder.Entity("Dental_Clinic.Models.Patient", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("birthday")
                        .HasColumnType("timestamp without time zone");

                    b.Property<short>("gender")
                        .HasColumnType("smallint");

                    b.Property<string>("middleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("surName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Dental_Clinic.Models.Post", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("postName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("salary")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Dental_Clinic.Models.ServicesProvided", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("Doctorid")
                        .HasColumnType("integer");

                    b.Property<int>("MedServiceid")
                        .HasColumnType("integer");

                    b.Property<int>("Visitid")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("Doctorid");

                    b.HasIndex("MedServiceid");

                    b.HasIndex("Visitid");

                    b.ToTable("ServicesProvideds");
                });

            modelBuilder.Entity("Dental_Clinic.Models.Visit", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("MedTreatmentid")
                        .HasColumnType("integer");

                    b.Property<int>("Patientid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("dateVisit")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("MedTreatmentid");

                    b.HasIndex("Patientid");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("Dental_Clinic.Models.Doctor", b =>
                {
                    b.HasOne("Dental_Clinic.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("Postid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Dental_Clinic.Models.ListPrepforTreatment", b =>
                {
                    b.HasOne("Dental_Clinic.Models.MedTreatment", "MedTreatment")
                        .WithMany()
                        .HasForeignKey("MedTreatmentid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dental_Clinic.Models.Medication", "Medication")
                        .WithMany()
                        .HasForeignKey("Medicationid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedTreatment");

                    b.Navigation("Medication");
                });

            modelBuilder.Entity("Dental_Clinic.Models.MedTreatment", b =>
                {
                    b.HasOne("Dental_Clinic.Models.Diagnos", "Diagnos")
                        .WithMany()
                        .HasForeignKey("Diagnosid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnos");
                });

            modelBuilder.Entity("Dental_Clinic.Models.ServicesProvided", b =>
                {
                    b.HasOne("Dental_Clinic.Models.Doctor", "Doctor")
                        .WithMany("ServicesProvideds")
                        .HasForeignKey("Doctorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dental_Clinic.Models.MedService", "MedService")
                        .WithMany()
                        .HasForeignKey("MedServiceid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dental_Clinic.Models.Visit", "Visit")
                        .WithMany()
                        .HasForeignKey("Visitid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("MedService");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("Dental_Clinic.Models.Visit", b =>
                {
                    b.HasOne("Dental_Clinic.Models.MedTreatment", "MedTreatment")
                        .WithMany("Visits")
                        .HasForeignKey("MedTreatmentid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dental_Clinic.Models.Patient", "Patient")
                        .WithMany("Visits")
                        .HasForeignKey("Patientid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedTreatment");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Dental_Clinic.Models.Doctor", b =>
                {
                    b.Navigation("ServicesProvideds");
                });

            modelBuilder.Entity("Dental_Clinic.Models.MedTreatment", b =>
                {
                    b.Navigation("Visits");
                });

            modelBuilder.Entity("Dental_Clinic.Models.Patient", b =>
                {
                    b.Navigation("Visits");
                });
#pragma warning restore 612, 618
        }
    }
}
